{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Florent\\\\Desktop\\\\trello\\\\pages\\\\connexion.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Fieldset from \"../components/Fieldset\";\nimport Form from \"../components/Form\";\nimport { checkLength } from \"../utils/error-checker\";\n\nvar Connexion = function Connexion() {\n  _s();\n\n  var _useState = useState(''),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = useState(''),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState({\n    isActive: false,\n    message: ''\n  }),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var onSubmit = function onSubmit() {\n    try {\n      if (!checkLength(password, 6)) throw new Error(\"Votre mot de passe doit contenir au moins 6 caractères.\");\n      if (!checkLength(email, 1)) throw new Error(\"Veuillez fournir une adresse email correcte.\");\n    } catch (e) {\n      setError({\n        isActive: true,\n        message: e.message\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      buttonName: \"Connexion\",\n      submitAction: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Fieldset, {\n        name: \"email\",\n        type: \"email\",\n        value: email,\n        onChange: function onChange(event) {\n          setEmail(event.target.value);\n        },\n        label: \"Adresse email\",\n        autocomplete: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        name: \"password\",\n        type: \"password\",\n        value: password,\n        onChange: function onChange(event) {\n          setPassword(event.target.value);\n        },\n        label: \"Mot de passe\",\n        autocomplete: \"current-password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false);\n};\n\n_s(Connexion, \"9IAFMKGsezyWxXgjAWgpCO3AAc4=\");\n\n_c = Connexion;\nexport default Connexion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connexion\");","map":{"version":3,"sources":["C:/Users/Florent/Desktop/trello/pages/connexion.tsx"],"names":["useState","Fieldset","Form","checkLength","Connexion","email","setEmail","password","setPassword","isActive","message","error","setError","onSubmit","Error","e","event","target","value"],"mappings":";;;;;;;AAAA,SAAqCA,QAArC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACMJ,QAAQ,CAAC,EAAD,CADd;AAAA,MACbK,KADa;AAAA,MACNC,QADM;;AAAA,mBAEYN,QAAQ,CAAC,EAAD,CAFpB;AAAA,MAEbO,QAFa;AAAA,MAEHC,WAFG;;AAAA,mBAIMR,QAAQ,CAAC;AAC/BS,IAAAA,QAAQ,EAAE,KADqB;AAE/BC,IAAAA,OAAO,EAAE;AAFsB,GAAD,CAJd;AAAA,MAIbC,KAJa;AAAA,MAINC,QAJM;;AASpB,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAG;AACC,UAAG,CAACV,WAAW,CAACI,QAAD,EAAW,CAAX,CAAf,EAA8B,MAAM,IAAIO,KAAJ,CAAU,yDAAV,CAAN;AAC9B,UAAG,CAACX,WAAW,CAACE,KAAD,EAAQ,CAAR,CAAf,EAA2B,MAAM,IAAIS,KAAJ,CAAU,8CAAV,CAAN;AAC9B,KAHD,CAGE,OAAOC,CAAP,EAAS;AACPH,MAAAA,QAAQ,CAAC;AACLH,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,OAAO,EAAEK,CAAC,CAACL;AAFN,OAAD,CAAR;AAIH;AACJ,GAVD;;AAYA,sBACA;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,UAAU,EAAC,WAAjB;AAA6B,MAAA,YAAY,EAAGG,QAA5C;AAAA,8BACI,QAAC,QAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,OAFT;AAGI,QAAA,KAAK,EAAER,KAHX;AAII,QAAA,QAAQ,EAAE,kBAACW,KAAD,EAAyC;AAC/CV,UAAAA,QAAQ,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACH,SANL;AAOI,QAAA,KAAK,EAAC,eAPV;AAQI,QAAA,YAAY,EAAC;AARjB;AAAA;AAAA;AAAA;AAAA,eADJ,eAWI,QAAC,QAAD;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,KAAK,EAAEX,QAHX;AAII,QAAA,QAAQ,EAAE,kBAACS,KAAD,EAAyC;AAC/CR,UAAAA,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,SANL;AAOI,QAAA,KAAK,EAAC,cAPV;AAQI,QAAA,YAAY,EAAC;AARjB;AAAA;AAAA;AAAA;AAAA,eAXJ,eAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eArBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADA;AA0BF,CA/CF;;GAAMd,S;;KAAAA,S;AAiDN,eAAeA,SAAf","sourcesContent":["import { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport Fieldset from \"../components/Fieldset\";\r\nimport Form from \"../components/Form\";\r\nimport { checkLength } from \"../utils/error-checker\";\r\n\r\nconst Connexion = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState({\r\n        isActive: false,\r\n        message: ''\r\n    });\r\n\r\n    const onSubmit = () => {\r\n        try{\r\n            if(!checkLength(password, 6)) throw new Error(\"Votre mot de passe doit contenir au moins 6 caractères.\");\r\n            if(!checkLength(email, 1)) throw new Error(\"Veuillez fournir une adresse email correcte.\");\r\n        } catch (e){\r\n            setError({\r\n                isActive: true,\r\n                message: e.message\r\n            });\r\n        }\r\n    }    \r\n\r\n    return (\r\n    <>\r\n        <Form buttonName=\"Connexion\" submitAction={ onSubmit }>\r\n            <Fieldset \r\n                name=\"email\" \r\n                type=\"email\" \r\n                value={email} \r\n                onChange={(event:ChangeEvent<HTMLInputElement>) => { \r\n                    setEmail(event.target.value)\r\n                } }\r\n                label=\"Adresse email\"\r\n                autocomplete=\"email\"\r\n            />\r\n            <Fieldset \r\n                name=\"password\" \r\n                type=\"password\" \r\n                value={password} \r\n                onChange={(event:ChangeEvent<HTMLInputElement>) => { \r\n                    setPassword(event.target.value)\r\n                } }\r\n                label=\"Mot de passe\"\r\n                autocomplete=\"current-password\"\r\n            />\r\n            <div>connexion</div>\r\n        </Form>\r\n    </>\r\n)};\r\n\r\nexport default Connexion;"]},"metadata":{},"sourceType":"module"}