{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Florent\\\\Desktop\\\\trello\\\\pages\\\\connexion.tsx\";\nimport { useState } from \"react\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Fieldset from \"../components/Fieldset\";\nimport Form from \"../components/Form\";\nimport Link from 'next/link';\nimport { checkLength } from \"../utils/error-checker\";\n\nconst Connexion = () => {\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: error,\n    1: setError\n  } = useState({\n    isActive: false,\n    message: ''\n  });\n\n  const onSubmit = () => {\n    try {\n      if (!checkLength(password, 6)) throw new Error(\"Votre mot de passe doit contenir au moins 6 caractères.\");\n      if (!checkLength(email, 1)) throw new Error(\"Veuillez fournir une adresse email correcte.\");\n      setError({\n        isActive: false,\n        message: \"\"\n      });\n    } catch (e) {\n      setError({\n        isActive: true,\n        message: e.message\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      buttonName: \"Connexion\",\n      submitAction: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Fieldset, {\n        name: \"email\",\n        type: \"email\",\n        value: email,\n        onChange: event => {\n          setEmail(event.target.value);\n        },\n        label: \"Adresse email\",\n        autocomplete: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Fieldset, {\n        name: \"password\",\n        type: \"password\",\n        value: password,\n        onChange: event => {\n          setPassword(event.target.value);\n        },\n        label: \"Mot de passe\",\n        autocomplete: \"current-password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/inscription\",\n      children: \"Pas encore inscrit ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), error.isActive && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Connexion;","map":{"version":3,"sources":["C:/Users/Florent/Desktop/trello/pages/connexion.tsx"],"names":["useState","ErrorMessage","Fieldset","Form","Link","checkLength","Connexion","email","setEmail","password","setPassword","error","setError","isActive","message","onSubmit","Error","e","event","target","value"],"mappings":";;;AAAA,SAAsBA,QAAtB,QAAsC,OAAtC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC;AAC/Ba,IAAAA,QAAQ,EAAE,KADqB;AAE/BC,IAAAA,OAAO,EAAE;AAFsB,GAAD,CAAlC;;AAKA,QAAMC,QAAQ,GAAG,MAAM;AACnB,QAAG;AACC,UAAG,CAACV,WAAW,CAACI,QAAD,EAAW,CAAX,CAAf,EAA8B,MAAM,IAAIO,KAAJ,CAAU,yDAAV,CAAN;AAC9B,UAAG,CAACX,WAAW,CAACE,KAAD,EAAQ,CAAR,CAAf,EAA2B,MAAM,IAAIS,KAAJ,CAAU,8CAAV,CAAN;AAC3BJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,QAAQ,EAAE,KADL;AAELC,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIH,KAPD,CAOE,OAAOG,CAAP,EAAS;AACPL,MAAAA,QAAQ,CAAC;AACLC,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,OAAO,EAAEG,CAAC,CAACH;AAFN,OAAD,CAAR;AAIH;AACJ,GAdD;;AAgBA,sBACA;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,UAAU,EAAC,WAAjB;AAA6B,MAAA,YAAY,EAAGC,QAA5C;AAAA,8BACI,QAAC,QAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,OAFT;AAGI,QAAA,KAAK,EAAER,KAHX;AAII,QAAA,QAAQ,EAAGW,KAAD,IAAyC;AAC/CV,UAAAA,QAAQ,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACH,SANL;AAOI,QAAA,KAAK,EAAC,eAPV;AAQI,QAAA,YAAY,EAAC;AARjB;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI,QAAC,QAAD;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,KAAK,EAAEX,QAHX;AAII,QAAA,QAAQ,EAAGS,KAAD,IAAyC;AAC/CR,UAAAA,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,SANL;AAOI,QAAA,KAAK,EAAC,cAPV;AAQI,QAAA,YAAY,EAAC;AARjB;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAuBI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBJ,EAwBMT,KAAK,CAACE,QAAN,iBAAkB,QAAC,YAAD;AAAc,MAAA,OAAO,EAAGF,KAAK,CAACG;AAA9B;AAAA;AAAA;AAAA;AAAA,YAxBxB;AAAA,kBADA;AA2BF,CApDF;;AAsDA,eAAeR,SAAf","sourcesContent":["import { ChangeEvent, useState } from \"react\";\r\nimport ErrorMessage from \"../components/ErrorMessage\";\r\nimport Fieldset from \"../components/Fieldset\";\r\nimport Form from \"../components/Form\";\r\nimport Link from 'next/link';\r\nimport { checkLength } from \"../utils/error-checker\";\r\n\r\nconst Connexion = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [error, setError] = useState({\r\n        isActive: false,\r\n        message: ''\r\n    });\r\n\r\n    const onSubmit = () => {\r\n        try{\r\n            if(!checkLength(password, 6)) throw new Error(\"Votre mot de passe doit contenir au moins 6 caractères.\");\r\n            if(!checkLength(email, 1)) throw new Error(\"Veuillez fournir une adresse email correcte.\");\r\n            setError({\r\n                isActive: false,\r\n                message: \"\"\r\n            });\r\n        } catch (e){\r\n            setError({\r\n                isActive: true,\r\n                message: e.message\r\n            });\r\n        }\r\n    }    \r\n\r\n    return (\r\n    <>\r\n        <Form buttonName=\"Connexion\" submitAction={ onSubmit }>\r\n            <Fieldset \r\n                name=\"email\" \r\n                type=\"email\" \r\n                value={email} \r\n                onChange={(event:ChangeEvent<HTMLInputElement>) => { \r\n                    setEmail(event.target.value)\r\n                } }\r\n                label=\"Adresse email\"\r\n                autocomplete=\"email\"\r\n            />\r\n            <Fieldset \r\n                name=\"password\" \r\n                type=\"password\" \r\n                value={password} \r\n                onChange={(event:ChangeEvent<HTMLInputElement>) => { \r\n                    setPassword(event.target.value)\r\n                } }\r\n                label=\"Mot de passe\"\r\n                autocomplete=\"current-password\"\r\n            />\r\n        </Form>\r\n        <Link href=\"/inscription\">Pas encore inscrit ?</Link>\r\n        { error.isActive && <ErrorMessage message={ error.message }/> }\r\n    </>\r\n)};\r\n\r\nexport default Connexion;"]},"metadata":{},"sourceType":"module"}